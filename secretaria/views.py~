# -*- encoding: utf-8 -*-
from django.shortcuts import render
from django.conf.urls import url

"""Classes de views genericas utilizadas"""
from django.views.generic import View, TemplateView, DetailView, UpdateView, DeleteView,ListView,FormView

'Importando Formularios necessários'
from .forms import *

'Importando Models necessárias'
from .models import *

from django.forms.models import model_to_dict #iterar em object no template

'Importando atributos da model a serem utilizados nas buscas'
import operator
from django.db.models import Q

    """ Consulta """
class ConsultaFormView(FormView):
	template_name = ''
	form_class = ConsultaForm
	success_url = ''
	
	def form_valid(self, form):
		return super(ConsultaFormView,self).form_valid(form)

class ConsultaDeleteView(DeleteView):
	model = Consulta
	#success_url = reverse_lazy('consulta_resumo')

class ConsultaDetailView(DetailView):
	pk_url_kwarg = "consulta_id"
	model = Consulta

	def get_context_data(self, **kwargs):
		context = super (ConsultaDetailView, self).get_context_data(**kwargs)
		return context

class ConsultaUpdateView(UpdateView):
	model = Consulta
	template_name_suffix = 'form_update'

class ConsultaListView(ListView):
	model = Consulta    	
	paginate_by = 10 

class ConsultaResumo(ConsultaListView):
	template_name=''

class ConsultaBuscaListView(ConsultaListView):
	def get_queryset(self):
        result = super(ConsultaBuscaListView, self).get_queryset()

        query = self.request.GET.get('q')
        if query:
            query_list = query.split()
            result = result.filter(
                #reduce(operator.and_,
                       #(Q(campo1__icontains=q) for q in query_list)) |
		#reduce(operator.and_,
                       #(Q(campo2__icontains=q) for q in query_list))
            )

        return result

#Views relacionadas à classe Exame:

class ExameFormView(FormView):
	template_name = ''
	form_class = ExameForm
	success_url = ''
	
	def form_valid(self, form):
		return super(ExameFormView,self).form_valid(form)

class ExameDeleteView(DeleteView):
	model = Exame
	#success_url = reverse_lazy('consulta_resumo')

class ExameDetailView(DetailView):
	pk_url_kwarg = "exame_id"
	model = Exame

	def get_context_data(self, **kwargs):
		context = super (ExameDetailView, self).get_context_data(**kwargs)
		return context

class ExameUpdateView(UpdateView):
	model = Exame
	template_name_suffix = 'form_update'

class ExameListView(ListView):
	model = Exame    	
	paginate_by = 10 

class ExameResumo(ExameListView):
	template_name=''

class ExameBuscaListView(ExameListView):
	def get_queryset(self):
        result = super(ExameBuscaListView, self).get_queryset()

        query = self.request.GET.get('q')
        if query:
            query_list = query.split()
            result = result.filter(
                #reduce(operator.and_,
                       #(Q(campo1__icontains=q) for q in query_list)) |
		#reduce(operator.and_,
                       #(Q(campo2__icontains=q) for q in query_list))
            )

        return result
